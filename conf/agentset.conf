primitives = [

  {
    name: in-radius
    tag: InRadius
    type: reporter
    return: "turtleset or patchset"
    description: "Reports the agents whose distance from myself is less than or equal to the given number. (This can include the agent itself). The distance to or a from a patch is measured from the center of the patch."
    turtles: true
    patches: true
    text: ""
    textbox: false
    keywords: "around, diameter, neighbors"
    trywidget: {
      netlogoweb-file: "nlw-1s.html"
      code: """
;; in the code below
;; sheep mark the grass they can eat immediately

to setup
	clear-all
        ask patches
           [ set pcolor green]

	create-turtles 3 [
            move-to one-of patches
            set shape "sheep"
            set size 2
            set color white
        ]
	reset-ticks
end
to go
        ask patches with [pcolor = yellow]
            [set pcolor green]
	ask turtles [
            ask (patches with [pcolor = green]) in-radius 2
	         [ set pcolor yellow ]
        ]
end
      """
    }
  }

  {
    name: neighbors
    tag: Neighbors
    type: reporter
    return: "turtleset or patchset"
    description: "Reports an agentset containing the 8 surrounding patches (neighbors) or 4 surrounding patches (neighbors4)."
    turtles: true
    patches: true
    text: ""
    textbox: false
    keywords: "around, diameter, neighbors"
    trywidget: {
      netlogoweb-file: "nlw-1s.html"
      code: """

;; in the code below
;; sheep mark the grass red and turn yellow when
;; interacting with another sheep

to setup
clear-all
ask patches
[ set pcolor one-of [black green]]

create-turtles 10 [
move-to one-of patches
set shape "sheep"
set size 3
set color white
set label-color red
]
reset-ticks
end
to go
ask patches with [pcolor = red]
[set pcolor green]
ask turtles [
right random 10
left random 10
forward 0.5
ask turtles-on neighbors
[ set color yellow
ask (patches with [pcolor = green]) in-radius 4
[ set pcolor red ]]

]
tick
end
      """
    }
  }

  {
    name: patches
    tag: Patches
    type: reporter
    return: "patchset"
    description: "Reports the agentset consisting of all patches."
    turtles: true
    patches: true
    text: ""
    textbox: false
    keywords: "around, diameter, neighbors"
    trywidget: {
      netlogoweb-file: "nlw-1s.html"
      code: """


;; in the code below
;; all patches change color
;; when turtles bump into each other

to setup
clear-all
ask patches
[ set pcolor one-of [black green]]

create-turtles 10 [
move-to one-of patches
set shape "sheep"
set size 3
set color white
set label-color red
]
reset-ticks
end
to go
ask patches with [pcolor = red]
[set pcolor green]
ask patches with [pcolor = blue]
[set pcolor black]
ask patches with [pcolor = pink]
[set pcolor blue]

ask turtles [
right random 10
left random 10
forward 0.5
ask turtles-on neighbors
[
ask (patches with [pcolor = green])
[ set pcolor red ]
ask (patches with [pcolor = black])
[ set pcolor one-of [blue pink]]
]

]
tick
end

      """
    }
  }

  {
    name: sort-by
    tag: Sort-by
    type: reporter
    return: "patchset"
    description: "If the input is a list, reports a new list containing the same items as the input list, in a sorted order defined by the\r\n  boolean reporter. reporter may be an anonymous reporter or the name of a reporter. If the input is an agentset or a list\r\n  of agents, reports a list (never an agentset) of agents. If the input is a list, the sort is stable, that is, the order\r\n  of items considered equal by the reporter is not disturbed. If the input is an agentset, ties are broken randomly."
    turtles: false
    patches: false
    text: ""
    textbox: false
    keywords: "around, diameter, neighbors"
    trywidget: {
      netlogoweb-file: "nlw-1s.html"
      code: """


;; in the code below
;; sheeps are arranged by size

to setup
clear-all
ask patches
[ set pcolor one-of [black green]]

create-turtles 1 [
move-to one-of patches
set shape "sheep"
set size 3
set color white
]
create-turtles 1 [
move-to one-of patches
set shape "sheep"
set size 4
set color violet
]
create-turtles 1 [
move-to one-of patches
set shape "sheep"
set size 5
set color yellow
]
create-turtles 1 [
move-to one-of patches
set shape "sheep"
set size 6
set color red
]
reset-ticks
end
to go

ask turtles [
right random 30
left random 30
forward 1
layout-circle sort-by [ [a b] -> [size] of a < [size] of b ] turtles 10

]
end



      """
    }
  }

  {
    name: count
    tag: Count
    type: reporter
    return: "patchset"
    description: "Reports the number of agents in the given agentset."
    turtles: true
    patches: true
    text: """
show count turtles
;; prints the total number of turtles
show count patches with [pcolor = red]
;; prints the total number of red patches"""
    textbox: true
    keywords: "around, diameter, neighbors"
    trywidget: {
      netlogoweb-file: "nlw-1s.html"
      code: """



;; in the code below
;; red label shows the number of yellow patches

to setup
clear-all
ask patches
[ set pcolor green]

create-turtles 1 [
move-to one-of patches
set shape "sheep"
set size 5
set color white
set label-color red
]
reset-ticks
end
to go
ask patches with [pcolor = yellow]
[set pcolor green]
ask turtles [
right random 10
left random 10
forward 0.5
ask (patches with [pcolor = green]) in-radius 2
[ set pcolor yellow ]
set label count (patches with [pcolor = yellow]) in-radius 6

]
tick
end




      """
    }
  }

  {
    name: any
    tag: Any
    type: reporter
    return: "patchset"
    description: "Reports true if the given agentset is non-empty, false otherwise. Equivalent to 'count agentset > 0', but more efficient (and arguably more readable). Note: nobody is not an agentset. You only get nobody back in situations where you were expecting a single agent, not a whole agentset. If any? gets nobody as input, an error results."
    turtles: true
    patches: true
    text: """
if any? turtles with [color = red]
[ show "at least one turtle is red!" ]"""
    textbox: true
    keywords: "around, diameter, neighbors"
    trywidget: {
      netlogoweb-file: "nlw-1s.html"
      code: """


to setup
clear-all

;; creates blue airplane shaped turtles at random x and y locations
create-turtles slider [
set shape "airplane"
set color blue
setxy random-xcor random-ycor
]

;; sets the color one of the turtles to red
ask one-of turtles [ set color red ]

reset-ticks
end

to go
ask turtles [
fd 1

;; if a blue turtle touches a red turtle, it changes its color red.
if any? turtles-here with [color = red] [
set color red
pen-down
]
]
tick
end




      """
    }
  }


]
